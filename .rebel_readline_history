1529782637369:(defn move [{:keys [body direction] :as snake}]\n    (conj\n         [(+ (direction 0) (-> body first (nth 0)))\n               (+ (direction 1) (-> body first (nth 0)))]\n         (butlast body)))
1529782695182:(move (create-snake))
1529782700253:(defn create-snake \n    ([body direction] {:body body \n                                            :direction direction})\n    ([] (create-snake (list [0 0]) [0 1])))
1529782703423:(move (create-snake))
1529782759918:(defn move [{:keys [body direction] :as snake}]\n    (assoc-in snake [:body]\n                  (conj\n                         [(+ (direction 0) (-> body first (nth 0)))\n                                 (+ (direction 1) (-> body first (nth 0)))]\n                         (butlast body))))
1529782762627:(move (create-snake))
1529782789705:(def a [1,2,3,4])
1529782793051:(butlast a)
1529782816861:(conj [] [])
1529782825873:(conj [1,2,3] [4,5,6\n               ])
1529782916297:(defn create-snake \n    ([body direction] {:body body \n                                            :direction direction})\n    ([] (create-snake (list [0 0]) [0 1])))
1529782919688:(defn move [{:keys [body direction] :as snake}]\n    (assoc-in snake [:body]\n                  (conj\n                         [(+ (direction 0) (-> body first (nth 0)))\n                                 (+ (direction 1) (-> body first (nth 0)))]\n                         (butlast body))))
1529782923634:(move (create-snake))
1529782975366:(defn move [{:keys [body direction] :as snake}]\n    (assoc-in snake [:body]\n                  (conj\n                         (list (+ (direction 0) (-> body first (nth 0)))\n                                           (+ (direction 1) (-> body first (nth 0))))\n                         (butlast body))))
1529782976171:(move (create-snake))
1529783006232:(defn move [{:keys [body direction] :as snake}]\n    (println (butlast body))\n    (assoc-in snake [:body]\n                  (conj\n                         (list (+ (direction 0) (-> body first (nth 0)))\n                                           (+ (direction 1) (-> body first (nth 0))))\n                         (butlast body))))
1529783008400:(move (create-snake))
1529783139031:(defn move [{:keys [body direction] :as snake}]\n    (println (butlast body))\n    (assoc-in snake [:body]\n                  (conj\n                         (list (+ (direction 0) (-> body first (nth 0)))\n                                           (+ (direction 1) (-> body first (nth 0))))\n                         (butlast body))))
1529784939370:(defn create-snake \n    ([body direction] {:body body \n                                            :direction direction})\n    ([] (create-snake (list [0 0]) [0 1])))
1529784941807:(move (create-snake))
1529784983778:(def body (list [0 0] [0 1]))
1529784992382:(butlast body)
1529785006558:(conj\n   [1 2]\n   (butlast body))
1529785011027:(conj\n   (butlast body)\n   [1 2])
1529785025861:(defn move [{:keys [body direction] :as snake}]\n    (println (butlast body))\n    (assoc-in snake [:body]\n                  (conj\n                         (butlast body)\n                         (list (+ (direction 0) (-> body first (nth 0)))\n                                           (+ (direction 1) (-> body first (nth 0)))))))
1529785027434:(move (create-snake))
1529785059747:(defn move [{:keys [body direction] :as snake} grow]\n    (println (butlast body))\n    (assoc-in snake [:body]\n                  (conj\n                         (if grow body (butlast body))\n                         (list (+ (direction 0) (-> body first (nth 0)))\n                                           (+ (direction 1) (-> body first (nth 0)))))))
1529785065278:(move (create-snake) false)
1529785071059:(move (create-snake) true)
1529785101725:(defn create-snake \n    ([body direction] {:body body \n                                            :direction direction})\n    ([] (create-snake '((0 0) (1 0)) [0 1])))
1529785104899:(move (create-snake) true)
1529785137450:(defn create-snake \n    ([body direction] {:body body \n                                            :direction direction})\n    ([] (create-snake '((0 1) (0 0)) [0 1])))
1529785140166:(move (create-snake) true)
1529785159406:(defn move [{:keys [body direction] :as snake} grow]\n    (println (butlast body))\n    (assoc-in snake [:body]\n                  (conj\n                         (if grow body (butlast body))\n                         (list (+ (direction 0) (-> body first (nth 0)))\n                                           (+ (direction 1) (-> body first (nth 1)))))))
1529785160723:(move (create-snake) true)
1529785174298:(conj\n   (butlast body)\n   [1 2])
1529785506303:(rand 0 1)
1529785513710:(rand)
1529785520425:(rand -1)
1529785523528:(rand 10)
1529785585094:(defn ri []\n    (int (.floor js/Random (rand 10))))
1529785588085:(ri)
1529785591805:Math.floor
1529785597420:(defn ri []\n    (int (.floor js/Math (rand 10))))
1529785599317:Math.floor
1529785601565:(ri)
1529785618117:(defn ri [ciel]\n    (int (.floor js/Math (rand ciel))))
1529785625244:(ri 100)
1529785820347:(defn create-apple \n    ([loc] {:location loc})\n    ([] (create-apple\n                 (ri 10)\n                 (ri 10))))
1529785836126:(defn create-apple \n    ([loc] {:location loc})\n    ([] (create-apple (ri 10) (ri 10))))
1529785843315:(defn create-apple \n    ([] (create-apple (ri 10) (ri 10)))\n    ([loc] {:location loc}))
1529785861615:(defn create-apple \n    ([] (create-apple [(ri 10) (ri 10)]))\n    ([loc] {:location loc}))
1529785875035:(create-apple)
1529785902746:(defn create-apple \n    ([] (create-apple [(ri 10) (ri 10)]))\n    ([loc] {:location loc\n                      :type :apple}))
1529785905378:(defn create-snake \n    ([body direction] {:body body \n                                            :type :snake\n                                            :direction direction})\n    ([] (create-snake '((0 1)) [0 1])))
1529788086686:(doc conj)
1529788117790:(conj nil 1)
1529788124677:(conj []\n      1)
1529788132181:(conj nil\n      \n      1)
1529788551744:(doc once)
1529788648039:(doc zip)
1529788653279:(doc interleave\n     ))
1529788654688:(doc interleave\n     )
1529788773222:(def a [[1 2] [3 4]])
1529788782933:(def b [9 8])
1529788790917:(interleave a b)
1529790018215:(= [1 2] (list 1 2))
1529790674782:(def a '(2 22))
1529790675885:a
1529790689644:(def b '([70 16] [90 40] [44 14] [52 56] [15 33] [15 40] [2 22] [90 37] [32 50] [63 23]))
1529790690356:b
1529790696655:(contains? b a)
1529790699045:a
1529790716223:(def a (into [] a))
1529790717070:a
1529790719588:(contains? b a)
1529790729077:(contains? a b\n           )
1529790739717:(contains? b a\n           )
1529790741060:a
1529790741732:b
1529790752772:(b 10\n   )
1529790760204:(nth b 3)
1529790765925:(nth b 5\n     )
1529790773070:(nth b 6)
1529790779892:(= (nth b 6) a)
1529790815523:b
1529790820636:(into #{} b)
1529790829776:(contains? (into #{} b) a)
1529799282078:(defn keypress [key]\n    (swap! app-state assoc-in [:snake :direction]\n               (cond\n                       (= key :up) [0 -1]\n                       (= key :down) [0 1]\n                       (= key :left) [-1 0]\n                       (= key :right) [1 0]\n                       :else (get-in @app-state [:snake :direction]))))
1529799291669:(def app-state (atom {:snake (create-snake)\n                                            :apples (map #(create-apple) (range 10))\n                                            :type :state}))
1529799298313:(defn create-snake \n    ([body direction] {:body body \n                                            :ids [(id) (id)]\n                                            :type :snake\n                                            :direction direction})\n    ([] (create-snake '((0 1) (0 2)) [1 0])))
1529799301799:(def ID (atom 0))
1529799302048:(defn id []\n    (let [id @ID]\n          (swap! ID inc)\n          id))
1529799303002:(def ID (atom 0))
1529799303250:(defn id []\n    (let [id @ID]\n          (swap! ID inc)\n          id))
1529799305193:(def app (.getElementById js/document "app"))
1529799306477:(defn ri [ciel]\n    (int (.floor js/Math (rand ciel))))
1529799309192:(defn create-snake \n    ([body direction] {:body body \n                                            :ids [(id) (id)]\n                                            :type :snake\n                                            :direction direction})\n    ([] (create-snake '((0 1) (0 2)) [1 0])))
1529799313042:(defn create-apple \n    ([] (create-apple [(ri COLUMNS) (ri ROWS)]))\n    ([loc] {:location loc\n                      :id (id)\n                      :type :apple}))
1529799316388:(def TILE 10)
1529799316533:(def VIEW-WIDTH (.-innerWidth js/window))
1529799316686:(def VIEW-HEIGHT (.-innerHeight js/window))
1529799316815:(def COLUMNS (floor (/ VIEW-WIDTH TILE)))
1529799316953:(def ROWS (floor (/ VIEW-HEIGHT TILE)))
1529799319492:(defn floor [n] (.floor js/Math n))
1529799320590:(def TILE 10)
1529799320741:(def VIEW-WIDTH (.-innerWidth js/window))
1529799320873:(def VIEW-HEIGHT (.-innerHeight js/window))
1529799320996:(def COLUMNS (floor (/ VIEW-WIDTH TILE)))
1529799321124:(def ROWS (floor (/ VIEW-HEIGHT TILE)))
1529799323853:(def TILE 10)
1529799323997:(def VIEW-WIDTH (.-innerWidth js/window))
1529799324131:(def VIEW-HEIGHT (.-innerHeight js/window))
1529799324276:(def COLUMNS (floor (/ VIEW-WIDTH TILE)))
1529799324440:(def ROWS (floor (/ VIEW-HEIGHT TILE)))
1529799327934:(def ID (atom 0))
1529799328162:(defn id []\n    (let [id @ID]\n          (swap! ID inc)\n          id))
1529799334636:(defn ate? [{[head & _] :body} apples] \n    (let [ate (contains? (into #{} (map #(get % :location) apples)) \n                                                head)]\n          ate))
1529799337872:(defn overlap? [{[head & tail] :body}]\n    (contains? (into #{} tail) head))
1529799354160:(defn move [{:keys [body direction ids] :as snake} grow]\n    (let [nx (+ (direction 0) (-> body first (nth 0)))\n                  ny (+ (direction 1) (-> body first (nth 1)))]\n          (cond-> snake\n                  true\n                  (assoc-in [:body]\n                                    (conj\n                                               (if grow body (butlast body))\n                                               (list \n                                                            (cond\n                                                                            (< nx 0) COLUMNS\n                                                                            (>= nx COLUMNS) 0\n                                                                            :else nx)\n                                                            (cond\n                                                                            (< ny 0) ROWS\n                                                                            (>= ny ROWS) 0\n                                                                            :else ny))))\n                  grow\n                  (update-in [:ids] conj (id)))))
1529799357716:(def app-state (atom {:snake (create-snake)\n                                            :apples (map #(create-apple) (range 10))\n                                            :type :state}))
1529799367261:(defn elt-pool [id]\n    (let [elts @elements\n                  element (elts id)]\n          (if (nil? element)\n                  (let [e (.createElement js/document "div")]\n                            (set! (.-id e) (str "element-" id))\n                            (set! (.-position (.-style e)) "absolute")\n                            (set! (.-height (.-style e)) (str TILE "px"))\n                            (set! (.-width (.-style e)) (str TILE "px"))\n                            (.appendChild app e) \n                            (swap! elements assoc id e)\n                            (elt-pool id))\n                  element)))
1529799371016:(def elements (atom {}))
1529799379637:(defn elt-pool [id]\n    (let [elts @elements\n                  element (elts id)]\n          (if (nil? element)\n                  (let [e (.createElement js/document "div")]\n                            (set! (.-id e) (str "element-" id))\n                            (set! (.-position (.-style e)) "absolute")\n                            (set! (.-height (.-style e)) (str TILE "px"))\n                            (set! (.-width (.-style e)) (str TILE "px"))\n                            (.appendChild app e) \n                            (swap! elements assoc id e)\n                            (elt-pool id))\n                  element)))
